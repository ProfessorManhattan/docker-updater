{
  "name": "@megabytelabs/updater",
  "version": "0.0.47",
  "description": "A general-purpose, compact Dockerfile project that includes bash, curl, git, jq, yq, and Node.js in a single container (only 43.4835 MB compressed!)",
  "license": "MIT",
  "author": "Brian Zalewski <brian@megabyte.space> (https://megabyte.space)",
  "homepage": "https://megabyte.space",
  "repository": {
    "type": "git",
    "url": "git+https://gitlab.com/megabyte-labs/dockerfile/ci-pipeline/updater.git"
  },
  "bugs": {
    "email": "help@megabyte.space",
    "url": "https://gitlab.com/megabyte-labs/dockerfile/ci-pipeline/updater/-/issues"
  },
  "scripts": {
    "build": "npm run build:latest && npm run build:slim",
    "build:latest": "task docker:build:fat",
    "build:slim": "task docker:build:slim"
  },
  "blueprint": {
    "description": "A general-purpose, compact Dockerfile project that includes various programs required for synchronizing project's with upstream repositories",
    "dockerSlimCommand": "--http-probe=false --exec 'bash start.sh && task start' --include-exe-file 'exe.txt' --mount \"$PWD/test-output:/work\" --workdir '/work'",
    "title": "Megabyte Labs Updater Image",
    "overview": "This project is home to a Dockerfile configuration for building a slim image that is capable of running a wide array of tasks defined in Megabyte Labs' [Bodega](https://github.com/ProfessorManhattan/Bodega) tasks (defined in Taskfile.yml). Bodega is used as a task runner that automatically installs dependencies. In each project in the Megabyte Labs ecosystem, a Taskfile.yml is included that defines standard build, test, compile, and publish commands. This image includes a lot of the software that Bodega would automatically install when running repository update operations to reduce CI time. This repository comes in two variants, a standard image and an image slimmed down with [DockerSlim](https://github.com/docker-slim/docker-slim). Both of the images include standard software that is used when running update operations like:\n\n* jq\n* yq\n* Go\n* Various global NPM packages (like ESLint)\n*Python 3\n*A whole lot more (our update / upstream repository synchronization process is quite thorough)",
    "repository": {
      "github": "https://github.com/ProfessorManhattan/docker-updater",
      "gitlab": "https://gitlab.com/megabyte-labs/docker/ci-pipeline/updater"
    },
    "name": "Updater",
    "slug": "updater",
    "group": "docker",
    "subgroup": "ci-pipeline"
  },
  "config": {
    "commitizen": {
      "path": "git-cz-emoji"
    }
  },
  "devDependencies": {},
  "keywords": [
    "alias",
    "docker",
    "dockerfile",
    "documentation",
    "megabytelabs",
    "professormanhattan",
    "updater"
  ],
  "engines": {
    "node": ">=10"
  },
  "funding": [
    {
      "type": "opencollective",
      "url": "https://opencollective.com/megabytelabs"
    },
    {
      "type": "patreon",
      "url": "https://www.patreon.com/ProfessorManhattan"
    }
  ],
  "lint-staged": {
    "**/*.{json,sh,yml}": [
      "prettier --write"
    ],
    "package.json": [
      "prettier-package-json --write"
    ]
  },
  "prettier": "@megabytelabs/prettier-config",
  "scripts-info": {
  },
  "standard-version": {
    "scripts": {
      "prebump": "if grep -q \"CMD.\\[\\\"--version\\\"\\]\" Dockerfile; then VERSION=$(docker run --cap-drop=ALL -e PY_COLORS=0 --rm megabytelabs/updater:latest | perl -pe 'if(($v)=/([0-9]+([.][0-9]+)+)/){print\"$v\";exit}$_=\"\"'); if [[ $VERSION == *.*.* ]]; then echo $VERSION; elif [[ $VERSION == *.* ]]; then echo $VERSION.0; fi; fi",
      "prerelease": "git add --all",
      "pretag": "PACKAGE_VERSION=$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[\",]//g' | tr -d '[[:space:]]') && if git show-ref --tags v$PACKAGE_VERSION --quiet; then git tag -d v$PACKAGE_VERSION; fi"
    }
  }
}
